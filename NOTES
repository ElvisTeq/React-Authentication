## Authentication API Documentation

- https://firebase.google.com/docs/reference/rest/auth#section-sign-in-email-password

## 1 Adding User Signup

- "AuthForm.js"
  => { useRef } to get input password/email
  => sending "POST" request to create account

//////////////////////////////////////////////////////////////////////////////////////////////////

## 2 Showing feedback

- "AuthForm.js"
  => { useState } To toggle/hide submit button to show <p>Loading...</p>
  => Handling Error message from "const data = await response.json()" => "data.error.message"

//////////////////////////////////////////////////////////////////////////////////////////////////

## 3 Adding User Login

- "AuthForm.js"
  => Sending "POST" request to signin

//////////////////////////////////////////////////////////////////////////////////////////////////

## 4 Managing the Auth State With Context

- "./store/auth-context.js"
  => React.createContext({}) (Creating Context)
  => <.Provider>{props.children}</.Provider> (Providing context to all children JSX)

- "index.js"
  => Imported "auth-context.js" <AuthContextProvider> (to provide Context to all the application)

- "AuthForm.js"
  => { useContext } to connect Context "AuthContextProvider()" & "AuthContext"
  => using "authCtx.login(tokenId)" to "setToken()" in "auth-context.js"

- "MainNavigation.js"
  => { useContext } to get "authCtx.isLoggedIn" to conditionally render <Link>
  => Conditionally Hidding Login/Logout Button based on "isLoggedIn"

//////////////////////////////////////////////////////////////////////////////////////////////////

## 5 Using JWT to requests protected data

- "ProfileForm.js" (Reset Password form)
  => { useRef } to get new input password
  => Sending "POST" request to change password
  => { useContext } To get context data (JWT) for "POST" request

//////////////////////////////////////////////////////////////////////////////////////////////////

## 6 Redirecting the User

\***\* Redirecting after changing password & after login \*\***

- "AuthForm.js"
  => { useHistory } to redirect User after sucessful login

- "ProfileForm.js"
  => { useHistory } to redirect User after password change

//////////////////////////////////////////////////////////////////////////////////////////////////

## 7 Adding Logout

- "MainNavigation.js"
  => Binding Context logout function to the "logout" <Button>

//////////////////////////////////////////////////////////////////////////////////////////////////

## 8 Protecting Frontend Pages (Navigation Guard)

\***\* Proventing User to visit unwanted Routes \*\***

- "App.js"
  => { useContext } authCtx.isLoggedIn to prevent access to <Route path=''> (based on login status)
  => { Redirect } To redirect User if <Route path="*"> <Redirect to="/" /> </Route>

//////////////////////////////////////////////////////////////////////////////////////////////////

## 9 Persisting User Authentication Status

Storing JWT in LocalStorage

- "auth-context.js"
  => Storing JWT to localStorage when Login
  => Clear JWT from localStorage after Logout

  => { useState } to set initial value to "localStorage.getItem('token')"
  => If (!token) => "null"
  => if (token) => contextValue will contain an existing token which will keep User logged in

------------------------------------------------------- localStorage.setItem("keyName", data)
To store data in LocalStorage (only strings & numbers)
If is a object ( JSON.stringify() )

------------------------------------------------------- localStorage.removeItem("keyName")
To delete stored data by "keyNaame"

------------------------------------------------------- localStorage.clear()
Delete all

//////////////////////////////////////////////////////////////////////////////////////////////////

## 10 Adding auto-logout

- "auth-context.js"
  => Adding expiration time to the "loginHandler" Function
  => Created Helper function to "calculateRemainingTime()"
  => "authCtx.login" now receives (token, expirationTime)

//////////////////////////////////////////////////////////////////////////////////////////////////

## 11 Finishing Steps

- "auth-context.js"
  => Clearing timer when logout
  => Storing expiration timer to localStorage
  => Using { useEffect } to check if (timer <= 6000) then { clear token/timer, return null }
